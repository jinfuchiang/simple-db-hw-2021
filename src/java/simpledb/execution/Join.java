package simpledb.execution;

import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    final private JoinPredicate predicate;
    private OpIterator opIterator1;
    private OpIterator opIterator2;
    private Tuple tuple1;
    private TupleDesc joinTupleDescription;
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.predicate = p;
        this.opIterator1 = child1;
        this.opIterator2 = child2;
        joinTupleDescription = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
        return this.predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return opIterator1.getTupleDesc().getFieldName(predicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return opIterator2.getTupleDesc().getFieldName(predicate.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return joinTupleDescription;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        opIterator1.open();
        opIterator2.open();
        if(opIterator1.hasNext()) tuple1 = opIterator1.next();
    }

    public void close() {
        super.close();
        opIterator1.close();
        opIterator2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        close();
        open();
    }
    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        while(tuple1 != null) {
            while (opIterator2.hasNext()) {
                Tuple tuple2 = opIterator2.next();
                if (predicate.filter(tuple1, tuple2)) {
                    Tuple joinTuple = new Tuple(joinTupleDescription);
                    joinTuple.setField(joinTuple.setField(0, tuple1), tuple2);
                    return joinTuple;
                }
            }
            opIterator2.rewind();
            if(!opIterator1.hasNext()) break;
            tuple1 = opIterator1.next();
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[] {opIterator1, opIterator2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        if(children.length == 2) {
            opIterator2 = children[1];
            opIterator1 = children[0];
            joinTupleDescription = TupleDesc.merge(opIterator1.getTupleDesc(), opIterator2.getTupleDesc());
        }
        else {
            throw new RuntimeException();
        }
    }

}
